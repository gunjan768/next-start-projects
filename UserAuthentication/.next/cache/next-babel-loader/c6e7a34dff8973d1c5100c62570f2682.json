{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Document, { Head, Main, NextScript } from \"next/document\";\nimport { getServerSideToken, getUserScript } from \"../lib/auth\";\nexport default class MyDocument extends Document {\n  static async getInitialProps(context) {\n    const props = await Document.getInitialProps(context);\n    const userData = await getServerSideToken(context.req);\n    return _objectSpread(_objectSpread({}, props), userData);\n  }\n\n  render() {\n    const {\n      user = {}\n    } = this.props; // dangerouslySetInnerHTML is an attribute under DOM elements in React. According to the official documentation, dangerouslySetInnerHTML\n    // is React’s replacement for using innerHTML in the browser DOM. In simple words, using dangerouslySetInnerHTML, you can set HTML \n    // directly from React. In general, setting HTML from code is risky because it’s easy to inadvertently ( without intention or \n    // accidentally ) expose your users to a cross-site scripting (XSS) attack. So, you can set HTML directly from React, but you have to \n    // type out dangerouslySetInnerHTML and pass an object with a __html key, to remind yourself that it’s dangerous.\n\n    return __jsx(\"html\", null, __jsx(Head, null), __jsx(\"body\", null, __jsx(Main, null), __jsx(\"script\", {\n      dangerouslySetInnerHTML: {\n        __html: getUserScript(user)\n      }\n    }), __jsx(NextScript, null)));\n  }\n\n}","map":{"version":3,"sources":["D:/Practice/Web/Next/UserAuthentication/pages/_document.js"],"names":["Document","Head","Main","NextScript","getServerSideToken","getUserScript","MyDocument","getInitialProps","context","props","userData","req","render","user","__html"],"mappings":";;;;;;;;;AAAA,OAAOA,QAAP,IAAmBC,IAAnB,EAAyBC,IAAzB,EAA+BC,UAA/B,QAAiD,eAAjD;AACA,SAASC,kBAAT,EAA6BC,aAA7B,QAAkD,aAAlD;AAEA,eAAe,MAAMC,UAAN,SAAyBN,QAAzB,CACf;AACC,eAAaO,eAAb,CAA6BC,OAA7B,EACA;AACC,UAAMC,KAAK,GAAG,MAAMT,QAAQ,CAACO,eAAT,CAAyBC,OAAzB,CAApB;AACA,UAAME,QAAQ,GAAG,MAAMN,kBAAkB,CAACI,OAAO,CAACG,GAAT,CAAzC;AAEA,2CAAYF,KAAZ,GAAsBC,QAAtB;AACA;;AAEDE,EAAAA,MAAM,GACN;AACC,UAAM;AAAEC,MAAAA,IAAI,GAAG;AAAT,QAAgB,KAAKJ,KAA3B,CADD,CAGC;AACA;AACA;AACA;AACA;;AACA,WACC,oBACC,MAAC,IAAD,OADD,EAEC,oBACC,MAAC,IAAD,OADD,EAEC;AAAQ,MAAA,uBAAuB,EAAI;AAAEK,QAAAA,MAAM,EAAET,aAAa,CAACQ,IAAD;AAAvB;AAAnC,MAFD,EAGC,MAAC,UAAD,OAHD,CAFD,CADD;AAUA;;AA5BF","sourcesContent":["import Document, { Head, Main, NextScript } from \"next/document\";\nimport { getServerSideToken, getUserScript } from \"../lib/auth\";\n\nexport default class MyDocument extends Document \n{\n\tstatic async getInitialProps(context) \n\t{\n\t\tconst props = await Document.getInitialProps(context);\n\t\tconst userData = await getServerSideToken(context.req);\n\n\t\treturn { ...props, ...userData };\n\t}\n\n\trender() \n\t{\n\t\tconst { user = {} } = this.props;\n\t\t\n\t\t// dangerouslySetInnerHTML is an attribute under DOM elements in React. According to the official documentation, dangerouslySetInnerHTML\n\t\t// is React’s replacement for using innerHTML in the browser DOM. In simple words, using dangerouslySetInnerHTML, you can set HTML \n\t\t// directly from React. In general, setting HTML from code is risky because it’s easy to inadvertently ( without intention or \n\t\t// accidentally ) expose your users to a cross-site scripting (XSS) attack. So, you can set HTML directly from React, but you have to \n\t\t// type out dangerouslySetInnerHTML and pass an object with a __html key, to remind yourself that it’s dangerous.\n\t\treturn (\n\t\t\t<html>\n\t\t\t\t<Head />\n\t\t\t\t<body>\n\t\t\t\t\t<Main />\n\t\t\t\t\t<script dangerouslySetInnerHTML = {{ __html: getUserScript(user) }} />\n\t\t\t\t\t<NextScript />\n\t\t\t\t</body>\n\t\t\t</html>\n\t\t);\n\t}\n}"]},"metadata":{},"sourceType":"module"}