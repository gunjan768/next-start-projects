{"ast":null,"code":"import axios from \"axios\";\nimport Router from \"next/router\"; // This will let the cookie data to be automatically passed along with the request ( i.e request using axios ).\n\naxios.defaults.withCredentials = true;\nexport const getServerSideToken = req => {\n  const {\n    signedCookies = {}\n  } = req;\n  if (!signedCookies || !signedCookies.token) return {};\n  return {\n    user: signedCookies.token\n  };\n};\nexport const getClientSideToken = () => {\n  if (false) {\n    const user = window[WINDOW_USER_SCRIPT_VARIABLE] || {};\n    return {\n      user\n    };\n  }\n\n  return {\n    user: {}\n  };\n};\nconst WINDOW_USER_SCRIPT_VARIABLE = \"__USER__\";\nexport const getUserScript = user => {\n  return `${WINDOW_USER_SCRIPT_VARIABLE} = ${JSON.stringify(user)};`;\n};\nexport const authInitialProps = (isProtectedRoute = false) => ({\n  req,\n  res\n}) => {\n  //  For the initial page load, getInitialProps will run on the server only. getInitialProps will then run on the client when navigating \n  // to a different route via the next/link component or by using next/router. So for the first when runs on server side, we will get \n  // back req object and for the subsequent loading req will be undefined as loads on client side.\n  const auth = req ? getServerSideToken(req) : getClientSideToken();\n  const currentPath = req ? req.url : window.location.pathname;\n  const user = auth.user;\n  const isAnonymous = !user || user.type !== \"authenticated\"; // console.log({req});\n\n  if (isProtectedRoute && isAnonymous && currentPath !== \"/login\") {\n    return redirectUser(res, \"/login\");\n  } // console.log({auth});\n\n\n  return {\n    auth\n  };\n};\n\nconst redirectUser = (res, path) => {\n  // console.log({res});\n  if (res) {\n    res.redirect(302, path);\n    res.finished = true; // console.log({path});\n\n    return {};\n  }\n\n  Router.replace(path);\n  return {};\n};\n\nexport const loginUser = async (email, password) => {\n  const {\n    data\n  } = await axios.post(\"/api/login\", {\n    email,\n    password\n  });\n\n  if (false) {\n    window[WINDOW_USER_SCRIPT_VARIABLE] = data || {};\n  }\n};\nexport const logoutUser = async () => {\n  if (false) {\n    window[WINDOW_USER_SCRIPT_VARIABLE] = {};\n  }\n\n  await axios.post(\"/api/logout\");\n  Router.push(\"/login\");\n};\nexport const getUserProfile = async () => {\n  const {\n    data\n  } = await axios.get(\"/api/profile\");\n  console.log({\n    data\n  });\n  return data;\n};","map":{"version":3,"sources":["D:/Practice/Web/Next/UserAuthentication/lib/auth.js"],"names":["axios","Router","defaults","withCredentials","getServerSideToken","req","signedCookies","token","user","getClientSideToken","window","WINDOW_USER_SCRIPT_VARIABLE","getUserScript","JSON","stringify","authInitialProps","isProtectedRoute","res","auth","currentPath","url","location","pathname","isAnonymous","type","redirectUser","path","redirect","finished","replace","loginUser","email","password","data","post","logoutUser","push","getUserProfile","get","console","log"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport Router from \"next/router\";\n\n// This will let the cookie data to be automatically passed along with the request ( i.e request using axios ).\naxios.defaults.withCredentials = true;\n\nexport const getServerSideToken = req => \n{\n\tconst { signedCookies = {} } = req;\n\n\tif(!signedCookies || !signedCookies.token) \n\treturn {};\n\n\treturn { user: signedCookies.token };\n};\n\nexport const getClientSideToken = () => \n{\n\tif(typeof window !== \"undefined\") \n\t{\n\t\tconst user = window[WINDOW_USER_SCRIPT_VARIABLE] || {};\n\n\t\treturn { user };\n\t}\n\n\treturn { user: {} };\n};\n\nconst WINDOW_USER_SCRIPT_VARIABLE = \"__USER__\";\n\nexport const getUserScript = user => \n{\n \treturn `${WINDOW_USER_SCRIPT_VARIABLE} = ${JSON.stringify(user)};`;\n}\n\nexport const authInitialProps = (isProtectedRoute = false) => ({ req, res }) => \n{\n\t//  For the initial page load, getInitialProps will run on the server only. getInitialProps will then run on the client when navigating \n\t// to a different route via the next/link component or by using next/router. So for the first when runs on server side, we will get \n\t// back req object and for the subsequent loading req will be undefined as loads on client side.\n\tconst auth = req ? getServerSideToken(req) : getClientSideToken();\n\tconst currentPath = req ? req.url : window.location.pathname;\n\tconst user = auth.user;\n\tconst isAnonymous = !user || user.type !== \"authenticated\";\n\t\n\t// console.log({req});\n\n\tif(isProtectedRoute && isAnonymous && currentPath !== \"/login\") \n\t{\n\t\treturn redirectUser(res, \"/login\");\n\t}\n\n\t// console.log({auth});\n\n\treturn { auth };\n}\n\nconst redirectUser = (res, path) => \n{\n\t// console.log({res});\n\n\tif(res) \n\t{\n\t\tres.redirect(302, path);\n\t\tres.finished = true;\n\t\t\n\t\t// console.log({path});\n\n\t\treturn {};\n\t}\n\n\tRouter.replace(path);\n\n\treturn {};\n}\n\nexport const loginUser = async (email, password) => \n{\n\tconst { data } = await axios.post(\"/api/login\", { email, password });\n\n\tif(typeof window !== \"undefined\") \n\t{\n\t\twindow[WINDOW_USER_SCRIPT_VARIABLE] = data || {};\n\t}\n}\n\nexport const logoutUser = async () => \n{\n\tif(typeof window !== \"undefined\") \n\t{\n\t\twindow[WINDOW_USER_SCRIPT_VARIABLE] = {};\n\t}\n\n\tawait axios.post(\"/api/logout\");\n\tRouter.push(\"/login\");\n}\n\nexport const getUserProfile = async () => \n{\n\tconst { data } = await axios.get(\"/api/profile\");\n\t\n\tconsole.log({data});\n\t\n\treturn data;\n}"]},"metadata":{},"sourceType":"module"}